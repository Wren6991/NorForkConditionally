def debugout c000
def debugin c001

def clear(dest)
  dest 'ff
end

def not(src, dest)
  clear(dest)
  dest src
end

def invert(dest)
  dest dest
end

def goto(address)
  var a
  a a address address
  free a
end

def copy(src, dest)
  not(src, dest)
  invert(dest)
end

def output(src, dest)     # for i/o ports, as they always read 0
  var a
  not(src, a)
  dest a
  free a
end

# fork to address if tested bit is false:
def getBitAndFork(src, data, address)
  var a
  not(data, a)            # a = ~data
  a src address next      # a = ~(~data | src) = data & ~src
  free a                  # results in 0 if tested bit is true; if so then skip to next.
end

# dest1 = ~(dest1 | src1); dest2 = ~(dest2 | src2); jump(address);
def NFCPairAndJump(src1, src2, dest1, dest2, address)
  dest1 src1
  dest2 src2 address address
end


# Strategy: find the least-significant 0 bit, set that bit to 1, set all bits below it to 0.
def increment(src, dest)
  var a, b
  clear(a)
  clear(b)
  getBitAndFork(src, '1, carry1)
  getBitAndFork(src, '2, carry2)
  getBitAndFork(src, '4, carry3)
  getBitAndFork(src, '8, carry4)
  getBitAndFork(src, '16, carry5)
  getBitAndFork(src, '32, carry6)
  getBitAndFork(src, '64, carry7)
  getBitAndFork(src, '128, carry8)
  dest 'ff finish finish
carry1:
  NFCPairAndJump('fe, 'ff, a, b, skip)
carry2:
  NFCPairAndJump('fd, 'fe, a, b, skip)
carry3:
  NFCPairAndJump('fb, 'fc, a, b, skip)
carry4:
  NFCPairAndJump('f7, 'f8, a, b, skip)
carry5:
  NFCPairAndJump('ef, 'f0, a, b, skip)
carry6:
  NFCPairAndJump('df, 'e0, a, b, skip)
carry7:
  NFCPairAndJump('bf, 'c0, a, b, skip)
carry8:
  NFCPairAndJump('7f, '80, a, b, skip)
skip:
  clear(dest)
  dest src
  dest b
  dest a
  invert(dest)
  free a b
finish:
end

loopStart:
var a
  increment(debugin, a)
  output(a, debugout)
  goto(loopStart)
free a

# PROBLEM: when increment gets expanded, we sub a into the body. However, a new variable a is declared inside increment - as the values don't get subbed til _after_ expansion, we are writing to this location of a instead of the first one!
# We need some way of subbing the final value in at expansion time - to do this, we also need to _know the value at expansion time.
# The current compiler structure has to go out the window.
# Time for a rewrite?
