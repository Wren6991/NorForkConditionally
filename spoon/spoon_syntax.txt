<program> ::= {<constdef>|<funcdef>|<macrodef>|<vardecl>}

<constdef> ::= `const` <type> <name> `=` <expression> `;`

<funcdef> ::= `function` [<type>] <name> `(` <type> <name> {`,` <type> <name>} `)` <block>

<type> ::= `int`|`pointer`|`void`

<macrodef> ::= `macro` <name> `(` <name> {`,` <name>} `)` <block>

<block> ::=  <statement>
         |   `{` {<vardecl>} {<statement>} `}`

<vardecl> ::= <type> <varname> {`,` <varname>} `;`

<varname> ::= <name> [`[` <number> `]`] [`=` <expression>]

<statement> ::=  <name> `(` <expression> {`,` <expression>} `)` `;`
             |   <name> `=` <expression> `;`
             |   `if` `(` <expression> `)` <block> [`else` <block>]
             |   `while` `(` <expression> `)` <block>
             |   <name> `:`
             |   (`break` | `continue` | `return`) `;`
           


<expression> ::= <value> [(`&&` | `||`) <expression>]

<value> ::= `!`<value>
         |  `(`<expression>`)`
         |  <name>
         |  <name> `(`<expression> {`,` <expression>}`)`
         |  <name> `[`<number>`]`
         |  <string>
         |  `{`<number> {`,` <number>} `}`
         |  <number>

<name> ::= [a-zA-Z_][a-zA-Z0-9_]*		// this isn't strictly BNF but...

<number> ::= (0x[0-9a-fA-F]+)|([0-9]+)
          |  `'`<char>`'`