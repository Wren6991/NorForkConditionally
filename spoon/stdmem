// stdmem
// Standard Spoon memory manipulation header
// Luke Wren 2013

#include "stddefs"
#include "stdmath"

function memset(pointer dest, int value, int16 count)
{
    while (first(count) || second(count))
    {
        write(value, dest);
        count = decrementPointer(count);
        dest = incrementPointer(dest);
    }
}

function pointer memcpy(pointer dest, pointer src, int count)
{
    while (count)
    {
        var int x = read(src);
        write(x, dest);
        dest = incrementPointer(dest);
        src = incrementPointer(src);
        count = decrement(count);
    }
    memcpy = dest;
}

// Copies a null-terminated string to dest, and returns the location of the byte after the last one written.
function pointer strcpy(pointer dest, pointer src)
{
    var char c;
    c = read(src);
    while (c)
    {
        write(c, dest);
        dest = incrementPointer(dest);
        src = incrementPointer(src);
        c = read(src);
    }
    strcpy = dest;
}

function int16 strlen(pointer src)
{
    strlen = 0;
    var char c = read(src);
    while (c)
    {
        strlen = incrementPointer(strlen);
        src = incrementPointer(src);
        c = read(src);
    }
}

function int strcmp(pointer sa, pointer sb)
{
    strcmp = 0;
    var char ca = read(sa);
    var char cb = read(sb);
    while (ca && cb)
    {
        if (!equal(ca, cb))
        {
            strcmp = 1;
            return;
        }
        sa = incrementPointer(sa);
        sb = incrementPointer(sb);
        ca = read(sa);
        cb = read(sb);
    }
    if (ca || cb)
        strcmp = 1;
}

function int strequal(pointer stra, pointer strb)
{
    strequal = !strcmp(stra, strb);
}

function int instr(pointer str, char tofind)
{
    var char c = read(str);
    instr = 0;
    while (c && xor(c, tofind))
    {
        str = incrementPointer(str);
        instr = increment(instr);
        c = read(str);
    }
}
