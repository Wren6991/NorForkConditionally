// stdmath
// Standard Spoon maths function header
// Luke Wren 2013

#include "stddefs"

// 8 bit

function int add(int a, int b)
{
    var int carry, temp;
    add = xor(a, b);
    carry = shiftleft(and(a, b));
    while (carry)
    {
        temp = add;
        add = xor(add, carry);
        carry = shiftleft(and(temp, carry));
    }
}

function int subtract(int a, int b)
{
    b = increment(not(b));	// two's complement negate
    subtract = add(a, b);
}

function int multiply(int a, int b)
{
    multiply = 0;
    while (b)
    {
        multiply = add(multiply, a);
        b = decrement(b);
    }
}

function int lessthan(int a, int b);

function int divide(int a, int b)
{
    divide = 0;
    if (!b)
	return;
    while (not(lessthan(a, b)))
    {
        a = subtract(a, b);
        divide = increment(divide);
    }
}

// non-zero if a < b:
// if the top bit is different and only true for b, a must be < b.
function int lessthan(int a, int b)
{
    lessthan = 0;
    var int difference = xor(a, b);
    while (difference)
    {
        if (and(difference, 0x80))
        {
            lessthan = and(b, 0x80);
            return;
        }
        difference = shiftleft(difference);
        a = shiftleft(a);
        b = shiftleft(b);
    }
}

function int equal(int a, int b)
{
    if (xor(a, b))
        equal = 0;
    else
        equal = 1;
}

function int max(int a, int b)
{
    if (lessthan(a, b))
        max = b;
    else
        max = a;
}

function int min(int a, int b)
{
    if (lessthan(a, b))
        min = a;
    else
        min = b;
}

function int shiftrightn(int a, int n)
{
    while (n)
    {
        a = shiftright(a);
        n = decrement(n);
    }
    shiftrightn = a;
}

function int shiftleftn(int a, int n)
{
    while (n)
    {
        a = shiftleft(a);
        n = decrement(n);
    }
    shiftleftn = a;
}

// 16 bit

function pointer incrementPointer(pointer p)
{
    var int a, b;
    b = increment(second(p));
    if (b)
        a = first(p);
    else
        a = increment(first(p));
    incrementPointer = pair(a, b);
}

function pointer decrementPointer(pointer p)
{
    var int a, b;
    if (second(p))
        a = first(p);
    else
        a = decrement(first(p));
    b = decrement(second(p));
    decrementPointer = pair(a, b);
}

function pointer addPointer(pointer p, int offset)
{
    var int bottom;
    bottom = add(second(p), offset);
    if (lessthan(bottom, second(p)))
        addPointer = pair(increment(first(p)), bottom);
    else
        addPointer = pair(first(p), bottom);
}

function pointer subtractPointer(pointer p, int offset)
{
    var int bottom;
    bottom = subtract(second(p), offset);
    if (lessthan(second(p), offset))
        subtractPointer = pair(decrement(first(p)), bottom);
    else
        subtractPointer = pair(first(p), bottom);
}

function int lessthanPointer(pointer a, pointer b)
{
    if (lessthan(first(a), first(b)))
        lessthanPointer = 1;
    else if (equal(first(a), first(b)))
        lessthanPointer = lessthan(second(a), second(b));
    else
        lessthanPointer = 0;
}

function int16 add16(int16 a, int16 b)
{
    add16 = addPointer(a, second(b));
    add16 = pair(add(first(add16), first(b)), second(add16));
}

function int16 subtract16(int16 a, int16 b)
{
    subtract16 = subtractPointer(a, second(b));
    subtract16 = pair(subtract(first(subtract16), first(b)), second(subtract16));
}
